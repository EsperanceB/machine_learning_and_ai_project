AWSTemplateFormatVersion: '2010-09-09'
Description: Optimized and Secure Voice-to-Video Workflow on AWS

Resources:
  
  ### S3 Bucket for Generated Videos ###
  VideoOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      VersioningConfiguration:
        Status: Enabled

  ### DynamoDB Table for Metadata ###
  RequestMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: requestId
          AttributeType: S
      KeySchema:
        - AttributeName: requestId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ### IAM Role for Lambda ###
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub ${VideoOutputBucket.Arn}/*
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt RequestMetadataTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                Resource: '*'

  ### Lambda Function (placeholder code zip) ###
  OrchestrationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrchestrationLambda
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 60
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {"statusCode": 200, "body": json.dumps("Hello from Lambda!")}

  ### API Gateway ###
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: VoiceToVideoAPI

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: voice
      RestApiId: !Ref ApiGateway

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrchestrationLambda.Arn}/invocations

  ### Permission for API Gateway to Invoke Lambda ###
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrchestrationLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  ### CloudFront Distribution ###
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: !GetAtt VideoOutputBucket.DomainName
            Id: VideoS3Origin
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: VideoS3Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
